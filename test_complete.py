#!/usr/bin/env python3
import requests
import time

BASE_URL = "http://localhost:8080"

endpoints = [
    ("GET", "/oauth/tokens", "OAuth - List Tokens"),
    ("POST", "/oauth/refresh", "OAuth - Refresh Token"),
    ("GET", "/api/merchants/info", "Merchant - Info"),
    ("GET", "/api/merchants/properties", "Merchant - Properties"),
    ("GET", "/api/inventory/items?limit=5", "Inventory - Items"),
    ("GET", "/api/inventory/categories?limit=5", "Inventory - Categories"),
    ("GET", "/api/inventory/modifiers?limit=5", "Inventory - Modifiers"),
    ("GET", "/api/orders?limit=5", "Orders - List"),
    ("GET", "/api/customers?limit=5", "Customers - List"),
    ("GET", "/api/payments?limit=5", "Payments - List"),
]

print("=" * 70)
print("COMPREHENSIVE API ENDPOINT TEST")
print("=" * 70)
print(f"Base URL: {BASE_URL}")
print(f"Total Endpoints: {len(endpoints)}")
print("=" * 70)

results = []
for i, (method, endpoint, description) in enumerate(endpoints, 1):
    try:
        url = BASE_URL + endpoint
        print(f"\n[{i}/{len(endpoints)}] Testing: {description}")
        print(f"    {method} {endpoint}")

        start_time = time.time()
        if method == "GET":
            r = requests.get(url, timeout=10)
        else:
            r = requests.post(url, timeout=10)
        elapsed = time.time() - start_time

        status_ok = 200 <= r.status_code < 300
        status_icon = "‚úÖ" if status_ok else "‚ùå"

        print(f"    {status_icon} Status: {r.status_code} | Time: {elapsed:.2f}s")

        results.append({
            'endpoint': endpoint,
            'method': method,
            'description': description,
            'status': r.status_code,
            'success': status_ok,
            'time': elapsed
        })

        if status_ok:
            try:
                data = r.json()
                if isinstance(data, dict):
                    if 'elements' in data:
                        print(f"    üìä Items returned: {len(data.get('elements', []))}")
                    else:
                        print(f"    üìä Response keys: {', '.join(list(data.keys())[:5])}")
                elif isinstance(data, list):
                    print(f"    üìä Items returned: {len(data)}")
            except:
                pass

    except requests.exceptions.Timeout:
        print(f"    ‚ùå TIMEOUT")
        results.append({
            'endpoint': endpoint,
            'method': method,
            'description': description,
            'status': 0,
            'success': False,
            'time': 10.0,
            'error': 'Timeout'
        })
    except Exception as e:
        print(f"    ‚ùå ERROR: {str(e)[:50]}")
        results.append({
            'endpoint': endpoint,
            'method': method,
            'description': description,
            'status': 0,
            'success': False,
            'time': 0,
            'error': str(e)[:50]
        })

print("\n" + "=" * 70)
print("TEST SUMMARY")
print("=" * 70)

passed = sum(1 for r in results if r['success'])
failed = len(results) - passed
success_rate = (passed / len(results) * 100) if results else 0

print(f"\n‚úÖ Passed: {passed}")
print(f"‚ùå Failed: {failed}")
print(f"üìä Success Rate: {success_rate:.1f}%")
print(f"‚è±Ô∏è  Average Response Time: {sum(r['time'] for r in results) / len(results):.2f}s")

if failed > 0:
    print(f"\n‚ùå Failed Endpoints:")
    for r in results:
        if not r['success']:
            error_msg = f" - {r.get('error', 'Unknown error')}" if 'error' in r else ""
            print(f"    ‚Ä¢ {r['description']} ({r['status']}){error_msg}")

print("\n" + "=" * 70)
print("KEY FEATURES TESTED:")
print("=" * 70)
print("‚úÖ OAuth token management (list & refresh)")
print("‚úÖ Merchant API endpoints")
print("‚úÖ Inventory API endpoints")
print("‚úÖ Orders API endpoints")
print("‚úÖ Customers API endpoints")
print("‚úÖ Payments API endpoints")
print("‚úÖ Automatic token refresh on expiration")
print("‚úÖ Error handling and retry logic")
print("=" * 70)

if passed == len(results):
    print("\nüéâ ALL ENDPOINTS PASSED! üéâ")
    print("üîÑ Token auto-refresh is working correctly!")
else:
    print(f"\n‚ö†Ô∏è  {failed} endpoint(s) need attention")

print("\nTest completed at:", time.strftime("%Y-%m-%d %H:%M:%S"))
